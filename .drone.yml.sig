eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgICB0ZXN0LXN5bnRheDoKICAgICAgICBpbWFnZTogYWxwaW5lOmxhdGVzdAogICAgICAgIGNvbW1hbmRzOgogICAgICAgICAgICAtIGFwayB1cGRhdGUgJiYgYXBrIGFkZCBsdWEgY3VybCB6aXAKICAgICAgICAgICAgLSBmaW5kIHNyYyAtbmFtZSAnKi5sdWEnIC1leGVjIGx1YWMgLXAge30gKwoKICAgIHBhY2thZ2UtbG92ZS1kZXY6CiAgICAgICAgaW1hZ2U6IGFscGluZTpsYXRlc3QKICAgICAgICB3aGVuOgogICAgICAgICAgICBldmVudDogcHVzaAogICAgICAgICAgICBicmFuY2g6IG1hc3RlcgogICAgICAgIGNvbW1hbmRzOgogICAgICAgICAgICAtIGV4cG9ydCBTWU5USEVJTl9WRVJTSU9OPWMke0RST05FX0NPTU1JVDo4fQogICAgICAgICAgICAtIGFwayB1cGRhdGUgJiYgYXBrIGFkZCB6aXAKICAgICAgICAgICAgLSBzY3JpcHRzL3BhY2thZ2UtbG92ZS5zaAoKICAgIHBhY2thZ2UtbG92ZS1yZWxlYXNlOgogICAgICAgIGltYWdlOiBhbHBpbmU6bGF0ZXN0CiAgICAgICAgd2hlbjoKICAgICAgICAgICAgZXZlbnQ6IHRhZwogICAgICAgICAgICBicmFuY2g6IHJlZnMvdGFncy8qCiAgICAgICAgY29tbWFuZHM6CiAgICAgICAgICAgIC0gZXhwb3J0IFNZTlRIRUlOX1ZFUlNJT049JHtEUk9ORV9UQUd9CiAgICAgICAgICAgIC0gYXBrIHVwZGF0ZSAmJiBhcGsgYWRkIHppcAogICAgICAgICAgICAtIHNjcmlwdHMvcGFja2FnZS1sb3ZlLnNoCgogICAgcGFja2FnZS1saW51eC1hcHBpbWFnZToKICAgICAgICBpbWFnZTogdWJ1bnR1OjE0LjA0CiAgICAgICAgd2hlbjoKICAgICAgICAgICAgZXZlbnQ6IG5ldmVyCiAgICAgICAgICAgIGJyYW5jaDogcmVmcy90YWdzLyoKICAgICAgICBjb21tYW5kczoKICAgICAgICAgICAgLSBleHBvcnQgU1lOVEhFSU5fVkVSU0lPTj0ke0RST05FX1RBR30KICAgICAgICAgICAgLSBleHBvcnQgTE9WRV9WRVJTSU9OPTAuMTAuMgogICAgICAgICAgICAtIGFwdC1nZXQgdXBkYXRlICYmIGFwdC1nZXQgaW5zdGFsbCBjdXJsIHppcAogICAgICAgICAgICAtIHNjcmlwdHMvcGFja2FnZS1saW51eC1hcHBpbWFnZS5zaAoKICAgIHBhY2thZ2Utd2luZG93czoKICAgICAgICBpbWFnZTogYWxwaW5lOmxhdGVzdAogICAgICAgIHdoZW46CiAgICAgICAgICAgIGV2ZW50OiB0YWcKICAgICAgICAgICAgYnJhbmNoOiByZWZzL3RhZ3MvKgogICAgICAgIGNvbW1hbmRzOgogICAgICAgICAgICAtIGV4cG9ydCBTWU5USEVJTl9WRVJTSU9OPSR7RFJPTkVfVEFHfQogICAgICAgICAgICAtIGV4cG9ydCBMT1ZFX1ZFUlNJT049MC4xMC4yCiAgICAgICAgICAgIC0gYXBrIHVwZGF0ZSAmJiBhcGsgYWRkIGN1cmwgemlwCiAgICAgICAgICAgIC0gc2NyaXB0cy9wYWNrYWdlLXdpbmRvd3Muc2gK.JTgm5iubht5AMwKXiNYPeun1_MfXI562n8HnC7Phleg